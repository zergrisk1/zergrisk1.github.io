{"version":3,"file":"component---src-templates-series-jsx-92c722a0accee208879b.js","mappings":"8KAIA,MAAMA,EAAiBC,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,0BAAAC,YAAA,gBAAVJ,CAAU,8CAK3BK,EAAUL,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,mBAAAC,YAAA,gBAAVJ,CAAU,6NAMJM,GAClBA,EAAMC,SACFD,EAAME,MAAMC,OAAOC,sBACnBJ,EAAME,MAAMC,OAAOE,gBAChBL,GACPA,EAAMC,SACFD,EAAME,MAAMC,OAAOG,gBACnBN,EAAME,MAAMC,OAAOI,UAMHP,GAClBA,EAAMC,SACFD,EAAME,MAAMC,OAAOK,6BACnBR,EAAME,MAAMC,OAAOM,uBA0C7B,IAjCgBC,IAAmC,IAAlC,QAAEC,EAAO,MAAEC,EAAK,SAAEX,GAAUS,EAC3C,OAAKC,EAEAC,EAaHC,EAAAA,cAACpB,EAAc,KACZkB,EAAQG,KAAI,CAACC,EAAKC,IACjBH,EAAAA,cAACI,EAAAA,KAAI,CACHC,IAAKC,KAAKC,UAAU,CAAEL,MAAKC,MAC3BK,GACEpB,IAAac,EAAIO,WAAa,QAAU,WAAWP,EAAIO,cAGzDT,EAAAA,cAACd,EAAO,CAACE,SAAUc,EAAIO,aAAerB,GACvBc,EAAIO,WAAY,KAAGP,EAAIQ,WAAW,SApBrDV,EAAAA,cAACpB,EAAc,KACZkB,EAAQG,KAAI,CAACC,EAAKC,IACjBH,EAAAA,cAACI,EAAAA,KAAI,CAACC,IAAKC,KAAKC,UAAU,CAAEL,MAAKC,MAAMK,GAAI,WAAWN,KACpDF,EAAAA,cAACd,EAAO,KAAcgB,OAPX,IA4BF,C,wGCzDrB,MAAMS,EAAS9B,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,iBAAAC,YAAA,eAAVJ,CAAU,iDAMnB+B,EAAQ/B,EAAAA,QAAOgC,GAAE9B,WAAA,CAAAC,YAAA,gBAAAC,YAAA,eAATJ,CAAS,wGAKZM,GAASA,EAAME,MAAMC,OAAOwB,OAIjCC,EAAWlC,EAAAA,QAAOmC,GAAEjC,WAAA,CAAAC,YAAA,mBAAAC,YAAA,eAATJ,CAAS,gKAOJM,GAASA,EAAME,MAAMC,OAAOwB,OACvC3B,GAASA,EAAME,MAAMC,OAAO2B,iBAIjCC,EAAerC,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,uBAAAC,YAAA,eAAVJ,CAAU,sFAIpBM,GAASA,EAAME,MAAMC,OAAOwB,OAOjCK,EAAOtC,EAAAA,QAAOuC,KAAIrC,WAAA,CAAAC,YAAA,eAAAC,YAAA,eAAXJ,CAAW,oCACbM,GAASA,EAAME,MAAMC,OAAO+B,eAoCvC,UAhCexB,IAA4B,IAA3B,YAAEyB,EAAW,KAAEC,GAAM1B,EACnC,MAAM2B,EAAaF,EAAYG,OACzBC,EAAQH,EAAKG,MAAMC,MAEzB,OACE3B,EAAAA,cAAC4B,EAAAA,EAAM,KACL5B,EAAAA,cAAC6B,EAAAA,EAAG,CACFC,MAAO,WAAWN,IAClBO,YAAaA,EAAAA,YACbC,IAAKC,EAAAA,UAGPjC,EAAAA,cAACW,EAAM,KACLX,EAAAA,cAACe,EAAQ,KAAC,YACVf,EAAAA,cAACY,EAAK,KAAC,IAAEY,EAAW,KAEpBxB,EAAAA,cAACkB,EAAY,KACXlB,EAAAA,cAAA,YAAO0B,EAAMQ,OAAO,UACpBlC,EAAAA,cAAA,YAAM,KACNA,EAAAA,cAACmB,EAAI,KAAC,mBACaO,EAAMA,EAAMQ,OAAS,GAAGC,YAAYC,OAIzDpC,EAAAA,cAACqC,EAAAA,EAAO,OAGVrC,EAAAA,cAACsC,EAAAA,EAAQ,CAACC,SAAUb,IACb,C,sICxEb,MAAMc,EAAkB3D,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,4BAAAC,YAAA,gBAAVJ,CAAU,+CAM5B4D,EAAc5D,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,wBAAAC,YAAA,gBAAVJ,CAAU,0FAUxBsC,EAAOtC,EAAAA,QAAO6D,EAAC3D,WAAA,CAAAC,YAAA,iBAAAC,YAAA,gBAARJ,CAAQ,oDAGVM,GAASA,EAAME,MAAMC,OAAO+B,eAEjCsB,EAAa9D,EAAAA,QAAO6D,EAAC3D,WAAA,CAAAC,YAAA,uBAAAC,YAAA,gBAARJ,CAAQ,4EAGhBM,GAASA,EAAME,MAAMC,OAAOwB,OAIjC8B,EAAU/D,EAAAA,QAAO6D,EAAC3D,WAAA,CAAAC,YAAA,oBAAAC,YAAA,gBAARJ,CAAQ,uFAIbM,GAASA,EAAME,MAAMC,OAAOuD,gBAIjCC,EAAejE,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,yBAAAC,YAAA,gBAAVJ,CAAU,mCAwE/B,IA3DiBgB,IAAmB,IAAlB,SAAE0C,GAAU1C,EAC5B,MAAM,EAACkD,EAAU,EAACC,IAAgBC,EAAAA,EAAAA,UAAS,IAErCC,EAAiBC,KAAW,KAThCC,SAASC,gBAAgBC,aACvBF,SAASC,gBAAgBE,WAC3BH,SAASC,gBAAgBG,aAAe,KAQTT,EAAYR,EAASL,QAClDuB,YAAW,IAAMT,EAAaD,EAAY,KAAK,IACjD,GACC,KAcH,OAZAW,EAAAA,EAAAA,YAAU,KACRC,OAAOC,iBAAiB,SAAUV,GAE3B,KACLS,OAAOE,oBAAoB,SAAUX,EAAe,IAErD,CAACH,EAAWR,KAEfmB,EAAAA,EAAAA,YAAU,KACRV,EAAa,GAAG,GACf,CAACT,IAGFvC,EAAAA,cAACwC,EAAe,KACbD,EAASuB,MAAM,EAAGf,GAAW9C,KAAI,CAAC8D,EAAM5D,KACvC,MAAM,MAAE2B,EAAK,KAAEM,EAAI,KAAE4B,EAAI,MAAEC,EAAK,OAAExC,GAAWsC,EAAK5B,aAC5C,QAAE+B,GAAYH,GACd,KAAEI,GAASJ,EAAKK,OACtB,OACEpE,EAAAA,cAACA,EAAAA,SAAc,CAACK,IAAKC,KAAKC,UAAU,CAAE4D,OAAM/B,UAC1CpC,EAAAA,cAACyC,EAAW,KACVzC,EAAAA,cAACY,EAAAA,EAAK,CAACyD,KAAK,MACTJ,EACCjE,EAAAA,cAAC8C,EAAY,KAAEmB,GACb,GAEJjE,EAAAA,cAACI,EAAAA,KAAI,CAACI,GAAI2D,GAAOrC,IAEnB9B,EAAAA,cAACI,EAAAA,KAAI,CAACI,GAAI,WAAW8D,IAAU7C,EAAQ,MAAO,QAC5CzB,EAAAA,cAAC2C,EAAU,KAAElB,IAEfzB,EAAAA,cAACmB,EAAI,KAAEiB,GACPpC,EAAAA,cAAC4C,EAAO,KAAEsB,GACVlE,EAAAA,cAACuE,EAAAA,EAAO,CAACzE,QAASkE,MAGZ,GAAL7D,GAAa,GAAHA,IACTH,EAAAA,cAACwE,EAAAA,EAAU,MAGdzB,EAAY,IAAM5C,GAAKoC,EAASL,OAAS,IAAM/B,GAC9CH,EAAAA,cAACqC,EAAAA,EAAO,CAACoC,GAAG,OAAOC,GAAG,SAET,IAGL,C","sources":["webpack://gatsby-starter-rundevelrun/./src/components/TagList/index.jsx","webpack://gatsby-starter-rundevelrun/./src/templates/Series.jsx","webpack://gatsby-starter-rundevelrun/./src/components/PostList/index.jsx"],"sourcesContent":["import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { Link } from \"gatsby\"\r\n\r\nconst TagListWrapper = styled.div`\r\n  margin-bottom: 16px;\r\n  word-break: break-all;\r\n`\r\n\r\nconst TagLink = styled.div`\r\n  display: inline-block;\r\n  padding: 9.6px 11.2px;\r\n  margin-right: 8px;\r\n  margin-bottom: 8px;\r\n  border-radius: 50px;\r\n  background-color: ${props =>\r\n    props.selected\r\n      ? props.theme.colors.selectedTagBackground\r\n      : props.theme.colors.tagBackground};\r\n  color: ${props =>\r\n    props.selected\r\n      ? props.theme.colors.selectedTagText\r\n      : props.theme.colors.tagText};\r\n  text-decoration: none;\r\n  font-size: 14.4px;\r\n  transition: all 0.2s;\r\n\r\n  &:hover {\r\n    background-color: ${props =>\r\n      props.selected\r\n        ? props.theme.colors.hoveredSelectedTagBackground\r\n        : props.theme.colors.hoveredTagBackground};\r\n  }\r\n`\r\n\r\nconst spaceToDash = text => {\r\n  return text\r\n  // return text.replace(/\\s+/g, \"-\")\r\n}\r\n\r\nconst TagList = ({ tagList, count, selected }) => {\r\n  if (!tagList) return null\r\n\r\n  if (!count) {\r\n    return (\r\n      <TagListWrapper>\r\n        {tagList.map((tag, i) => (\r\n          <Link key={JSON.stringify({ tag, i })} to={`/tags?q=${tag}`}>\r\n            <TagLink>{spaceToDash(tag)}</TagLink>\r\n          </Link>\r\n        ))}\r\n      </TagListWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <TagListWrapper>\r\n      {tagList.map((tag, i) => (\r\n        <Link\r\n          key={JSON.stringify({ tag, i })}\r\n          to={\r\n            selected === tag.fieldValue ? \"/tags\" : `/tags?q=${tag.fieldValue}`\r\n          }\r\n        >\r\n          <TagLink selected={tag.fieldValue === selected}>\r\n            {spaceToDash(tag.fieldValue)} ({tag.totalCount})\r\n          </TagLink>\r\n        </Link>\r\n      ))}\r\n    </TagListWrapper>\r\n  )\r\n}\r\n\r\nexport default TagList\r\n","import React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\n\r\nimport styled from \"styled-components\"\r\n\r\nimport Layout from \"components/Layout\"\r\nimport SEO from \"components/SEO\"\r\nimport PostList from \"components/PostList\"\r\nimport Divider from \"components/Divider\"\r\n\r\nimport { description, siteUrl } from \"../../blog-config\"\r\n\r\nconst Header = styled.div`\r\n  @media (max-width: 768px) {\r\n    padding: 0px 15px;\r\n  }\r\n`\r\n\r\nconst Title = styled.h1`\r\n  margin-bottom: 15px;\r\n  line-height: 1.2;\r\n  font-size: 32px;\r\n  font-weight: bold;\r\n  color: ${props => props.theme.colors.text};\r\n  word-break: break-all;\r\n`\r\n\r\nconst Subtitle = styled.h3`\r\n  display: inline-block;\r\n  padding: 2px 3px;\r\n  margin-top: 32px;\r\n  margin-bottom: 8px;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  background-color: ${props => props.theme.colors.text};\r\n  color: ${props => props.theme.colors.bodyBackground};\r\n  letter-spacing: -1px;\r\n`\r\n\r\nconst SeriesInform = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 16px;\r\n  color: ${props => props.theme.colors.text};\r\n\r\n  & > span {\r\n    margin: 0 3px;\r\n  }\r\n`\r\n\r\nconst Date = styled.span`\r\n  color: ${props => props.theme.colors.tertiaryText};\r\n  font-weight: lighter;\r\n`\r\n\r\nconst Series = ({ pageContext, data }) => {\r\n  const seriesName = pageContext.series\r\n  const posts = data.posts.nodes\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO\r\n        title={`SERIES: ${seriesName}`}\r\n        description={description}\r\n        url={siteUrl}\r\n      />\r\n\r\n      <Header>\r\n        <Subtitle> SERIES </Subtitle>\r\n        <Title> {seriesName} </Title>\r\n\r\n        <SeriesInform>\r\n          <span>{posts.length} Posts</span>\r\n          <span>Â·</span>\r\n          <Date>\r\n            Last updated on {posts[posts.length - 1].frontmatter.date}\r\n          </Date>\r\n        </SeriesInform>\r\n\r\n        <Divider />\r\n      </Header>\r\n\r\n      <PostList postList={posts} />\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default Series\r\n\r\nexport const pageQuery = graphql`\r\n  query BlogSeriesBySeriesName($series: String) {\r\n    posts: allMarkdownRemark(\r\n      sort: { order: ASC, fields: [frontmatter___date] }\r\n      filter: { frontmatter: { series: { eq: $series } } }\r\n    ) {\r\n      nodes {\r\n        excerpt(pruneLength: 200, truncate: true)\r\n        fields {\r\n          slug\r\n        }\r\n        frontmatter {\r\n          date(formatString: \"MMMM DD, YYYY\")\r\n          update(formatString: \"MMM DD, YYYY\")\r\n          title\r\n          tags\r\n          emoji\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","import React, { useState, useEffect } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport _ from \"lodash\"\r\n\r\nimport { Link } from \"gatsby\"\r\n\r\nimport Title from \"components/Title\"\r\nimport Divider from \"components/Divider\"\r\nimport TagList from \"components/TagList\"\r\nimport DisplayAds from \"../DisplayAd\"\r\n\r\nconst PostListWrapper = styled.div`\r\n  @media (max-width: 768px) {\r\n    padding: 0 10px;\r\n  }\r\n`\r\n\r\nconst PostWrapper = styled.div`\r\n  position: relative;\r\n  top: 0;\r\n  transition: all 0.5s;\r\n\r\n  @media (max-width: 768px) {\r\n    padding: 0 5px;\r\n  }\r\n`\r\n\r\nconst Date = styled.p`\r\n  margin-bottom: 16px;\r\n  font-size: 14.4px;\r\n  color: ${props => props.theme.colors.tertiaryText};\r\n`\r\nconst SeriesName = styled.p`\r\n  font-size: 14.4px;\r\n  float: right;\r\n  color: ${props => props.theme.colors.text};\r\n  text-decoration-line: underline;  \r\n`\r\n\r\nconst Excerpt = styled.p`\r\n  margin-bottom: 32px;\r\n  line-height: 1.7;\r\n  font-size: 15px;\r\n  color: ${props => props.theme.colors.secondaryText};\r\n  word-break: break-all;\r\n`\r\n\r\nconst EmojiWrapper = styled.div`\r\n  float:left;\r\n  margin-right: 15px;  \r\n`\r\n\r\nconst checkIsScrollAtBottom = () => {\r\n  return (\r\n    document.documentElement.scrollHeight -\r\n      document.documentElement.scrollTop <=\r\n    document.documentElement.clientHeight + 100\r\n  )\r\n}\r\n\r\nconst PostList = ({ postList }) => {\r\n  const [postCount, setPostCount] = useState(10)\r\n\r\n  const handleMoreLoad = _.throttle(() => {\r\n    if (checkIsScrollAtBottom() && postCount < postList.length) {\r\n      setTimeout(() => setPostCount(postCount + 10), 300)\r\n    }\r\n  }, 250)\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", handleMoreLoad)\r\n\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", handleMoreLoad)\r\n    }\r\n  }, [postCount, postList])\r\n\r\n  useEffect(() => {\r\n    setPostCount(10)\r\n  }, [postList])\r\n\r\n  return (\r\n    <PostListWrapper>\r\n      {postList.slice(0, postCount).map((post, i) => {\r\n        const { title, date, tags, emoji, series } = post.frontmatter\r\n        const { excerpt } = post\r\n        const { slug } = post.fields\r\n        return (\r\n          <React.Fragment key={JSON.stringify({ slug, date })}>\r\n            <PostWrapper>\r\n              <Title size=\"bg\">\r\n                {emoji ? (\r\n                  <EmojiWrapper>{emoji}</EmojiWrapper>\r\n                ) : ''\r\n                }\r\n                <Link to={slug}>{title}</Link>\r\n              </Title>\r\n              <Link to={`/series/${_.replace(series, /\\s/g, \"-\")}`}>\r\n                <SeriesName>{series}</SeriesName>\r\n              </Link>\r\n              <Date>{date}</Date>\r\n              <Excerpt>{excerpt}</Excerpt>\r\n              <TagList tagList={tags} />\r\n            </PostWrapper>\r\n            {\r\n              (i == 0 || i==2) && (\r\n                <DisplayAds />\r\n              )\r\n            }\r\n            {postCount - 1 !== i && postList.length - 1 !== i && (\r\n              <Divider mt=\"48px\" mb=\"32px\" />\r\n            )}\r\n          </React.Fragment>\r\n        )\r\n      })}\r\n    </PostListWrapper>\r\n  )\r\n}\r\n\r\nexport default PostList\r\n"],"names":["TagListWrapper","styled","div","withConfig","displayName","componentId","TagLink","props","selected","theme","colors","selectedTagBackground","tagBackground","selectedTagText","tagText","hoveredSelectedTagBackground","hoveredTagBackground","_ref","tagList","count","React","map","tag","i","Link","key","JSON","stringify","to","fieldValue","totalCount","Header","Title","h1","text","Subtitle","h3","bodyBackground","SeriesInform","Date","span","tertiaryText","pageContext","data","seriesName","series","posts","nodes","Layout","SEO","title","description","url","siteUrl","length","frontmatter","date","Divider","PostList","postList","PostListWrapper","PostWrapper","p","SeriesName","Excerpt","secondaryText","EmojiWrapper","postCount","setPostCount","useState","handleMoreLoad","_throttle","document","documentElement","scrollHeight","scrollTop","clientHeight","setTimeout","useEffect","window","addEventListener","removeEventListener","slice","post","tags","emoji","excerpt","slug","fields","size","_replace","TagList","DisplayAds","mt","mb"],"sourceRoot":""}